Implementation decisions/ Immediate Workflow:


-- Observation space will have a config object that will specify its shape -- Fernando
-- Action space will be an attribute of the environment declared during the run() -- Fernando
-- We will build an Analyzer class that receives the data feed in the same fashion as the agent and keeps track of execution
prices of the agent and benchmark algorithm. -- Florin
-- Don't worry about trainers for now.
-- Merge lob_env_old with base_env and delete the discarded parts. --Chris
-- Get the Datafeed up and running --Florin
-- Keep the Broker class as an attribute of the environment and have it manage the execution of orders (we will implement fancy execution aspects later) -- Chris
-- GUI/Render: PyQT library to monitor training graphs/ Tensorboard from RLLib to monitor training prices -- Florin
-- Provide Unittests to check for proper functionality of the implemented logic -- Chris


Currently Outstanding To-Do's:

-- GUI/Render: PyQT library to monitor training graphs/ Tensorboard from RLLib to monitor training prices -- Florin
-- Provide Unittests to check for proper functionality of the implemented logic -- Chris
-- Get the Datafeed up and running --Florin
	* the start and end date cannot be defined yet.
	* Currently, the lob_depth parameter does not work yet. (does work if LOB is returned as OrderBook class, not otherwise).
-- Merge the dev_fixs branch back into the master branch
-- Account for all outstanding volumes to be placed in one order at the end (and if this is not possible, a penalty based on remaining volume)
-- I still feel sth is wrong with the index during environment stepping (i.e.: with self.time). Needs to be checked if the episode is over at the correct time...)

Current questions... (to be discussed):

-- If an agent is allowed to observe historical LOBs, the observation space becomes 'dynamic' (i.e.: some orders are taken out of the LOB and hence the depth changes. How to deal with this during training? Just padding with 0's? Does that have an effect on training?
-- Currently the data feed can not return any LOBs before the current time t (it just moves forward). Do we need to allow this?
-- Currently we can not incorporate statistics calculated from historic prices (i.e. such like current volatility of mid prices or sth like that...) Do we want to incorporate this now?
-- Rename DataAnalyzer to TradeMonitor?
-- I think within the next_lob_snapshot function, the test for if self.remaining_rows_in_file < 0: Should this be an <= sign? Could you quickly check?
 
