
Currently Outstanding To-Do's:

-- GUI/Render: PyQT library to monitor training graphs/ Tensorboard from RLLib to monitor training prices -- Florin
-- Get the Datafeed up and running --Florin
	* the start and end date cannot be defined yet.
	* Currently, the lob_depth parameter does not work yet. (does work if LOB is returned as OrderBook class, not otherwise) Decision: Put this in the env
-- Provide Unittests to check for proper functionality of the implemented logic -- Chris
-- Write training code (stable baselines/RLLib) and start to debug the base_env -- Chris, Fernando

Current questions... (to be discussed):

-- If an agent is allowed to observe historical LOBs, the observation space becomes 'dynamic' (i.e.: some orders are taken out of the LOB and hence the depth changes. How to deal with this during training? Just padding with 0's? Does that have an effect on training? Fernando: The depth isn't going to change when training on historic data, since the next state is always fetched by build_observation, the "modified LOB" is not used at all when fetching the next state. When training with a simulator this does come into play, and padding with 0s is the most common way to solve the variable size issue.
-- Currently the data feed can not return any LOBs before the current time t (it just moves forward). Do we need to allow this? Fernando: This is a training choice, normally when training on historical data, the data is looped over (i.e we start at day 0, iteratively train on day n+1 until we ran out of days and then go back to 0 and repeat) as to present the agent with the "natural sequence of events",but we could consider each trading day independent and sample randomly as well.
-- Currently we can not incorporate statistics calculated from historic prices (i.e. such like current volatility of mid prices or sth like that...) Do we want to incorporate this now? Fernando: Each statistic could be added as an attribute of the Analyzer/TradeMonitor right? Would be pretty straightforward
-- Rename DataAnalyzer to TradeMonitor? Fernando: I think it's a good name, it's a bit more specific than DataAnalyzer, I support the name change, but maybe call it TradesMonitor with an s, since it will monitor all trades?
-- I have looked into ways of coding the Implementation Shortfall mentioned in the End-to-End paper. They state the formula is IS= arrival_price*volume_traded - executed_price* volume_traded, but do not define what the arrival price is (Wikipedia says it's often taken as the last executed price or the midpoint) asking this to AlgoTrader will be the best way to solve this issue I think.
 
Decisions:

-- Add as many past snapshots as needed to lob_hist_rl/bmk at the init of the environment, then fetch past snapshots from there in build_observation()
-- Switch to storing pre-trade lobs in lob_hist_rl/bmk
-- Have both linear and random sampling of days/starting points
-- Start training on 1 day of data
-- We will train both with fixed and random episode lengths and analyze the performance/flexibility trade-off
-- Start trying to train with 1-day data
-- Rename DataAnalyzer to TradesMonitor
